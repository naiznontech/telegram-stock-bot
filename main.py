import os
import logging
import requests
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# L∆∞u tr·ªØ c·∫£nh b√°o (trong th·ª±c t·∫ø n√™n d√πng database, nh∆∞ng ƒë·ªÉ ƒë∆°n gi·∫£n d√πng dict)
user_alerts = {}

# H√†m l·∫•y gi√° c·ªï phi·∫øu t·ª´ API VN
def get_stock_price(symbol):
    """L·∫•y gi√° c·ªï phi·∫øu t·ª´ SSI API ho·∫∑c VietStock"""
    try:
        # Th·ª≠ SSI API tr∆∞·ªõc
        url = f"https://iboard.ssi.com.vn/dchart/api/1.1/defaultAllStocks"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            for stock in data:
                if stock.get('stockSymbol', '').upper() == symbol.upper():
                    return {
                        'price': stock.get('lastPrice', 0),
                        'change': stock.get('priceChange', 0),
                        'change_percent': stock.get('percentPriceChange', 0)
                    }
        
        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ API kh√°c
        url2 = f"https://apipubaws.tcbs.com.vn/stock-insight/v1/stock/bars-long-term?ticker={symbol.upper()}&type=stock&resolution=D&from=0&to=9999999999"
        response2 = requests.get(url2, timeout=10)
        
        if response2.status_code == 200:
            data2 = response2.json()
            if data2.get('data') and len(data2['data']) > 0:
                latest = data2['data'][-1]
                return {
                    'price': latest.get('close', 0),
                    'change': 0,
                    'change_percent': 0
                }
    except Exception as e:
        logger.error(f"Error getting stock price: {e}")
    
    return None

# H√†m ki·ªÉm tra s·ª± ki·ªán GDKHQ
def check_gdkhq_event(symbol):
    """Ki·ªÉm tra ng√†y GDKHQ trong 3 th√°ng t·ªõi"""
    try:
        # API l·ªãch s·ª± ki·ªán t·ª´ c√°c ngu·ªìn c√¥ng khai
        urls = [
            f"https://apipubaws.tcbs.com.vn/tcanalysis/v1/company/{symbol.upper()}/event-timeline",
            f"https://finfo-api.vndirect.com.vn/v4/events?q=ticker:{symbol.upper()}~type:GDKHQ~from:{datetime.now().strftime('%Y-%m-%d')}~to:{(datetime.now() + timedelta(days=90)).strftime('%Y-%m-%d')}"
        ]
        
        for url in urls:
            try:
                headers = {'User-Agent': 'Mozilla/5.0'}
                response = requests.get(url, headers=headers, timeout=10)
                
                # B·ªè qua l·ªói 403, 404
                if response.status_code in [403, 404]:
                    continue
                    
                if response.status_code == 200:
                    data = response.json()
                    
                    # X·ª≠ l√Ω data t·ª´ TCBS
                    if 'listEventQuarter' in data:
                        for event in data.get('listEventQuarter', []):
                            event_type = event.get('ticker', '')
                            if 'GDKHQ' in event_type or 'Record' in event_type:
                                event_date = event.get('exrightDate', '')
                                if event_date:
                                    return {
                                        'has_event': True,
                                        'date': event_date,
                                        'type': 'GDKHQ'
                                    }
                    
                    # X·ª≠ l√Ω data t·ª´ VNDirect
                    if 'data' in data and isinstance(data['data'], list):
                        for event in data['data']:
                            if event.get('type') == 'GDKHQ':
                                event_date = event.get('recordDate', '')
                                if event_date:
                                    return {
                                        'has_event': True,
                                        'date': event_date,
                                        'type': 'GDKHQ'
                                    }
            except:
                continue
        
        return {'has_event': False, 'date': '', 'type': ''}
    except Exception as e:
        logger.error(f"Error checking GDKHQ: {e}")
        return {'has_event': False, 'date': '', 'type': ''}

# L·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot"""
    welcome_text = """
ü§ñ *Ch√†o m·ª´ng ƒë·∫øn v·ªõi Stock Alert Bot VN!*

üìå *C√°c l·ªánh c√≥ s·∫µn:*
/alert MaCK Gia - T·∫°o c·∫£nh b√°o gi√°
   V√≠ d·ª•: /alert VNM 80000

/list - Xem danh s√°ch c·∫£nh b√°o

/delete SoThuTu - X√≥a c·∫£nh b√°o
   V√≠ d·ª•: /delete 1

/price MaCK - Xem gi√° hi·ªán t·∫°i
   V√≠ d·ª•: /price VNM

/help - Xem h∆∞·ªõng d·∫´n

üí° Bot s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra gi√° m·ªói 5 ph√∫t v√† th√¥ng b√°o khi ƒë·∫°t m·ª•c ti√™u!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# L·ªánh /alert
async def alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """T·∫°o c·∫£nh b√°o gi√°"""
    user_id = update.effective_user.id
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå Sai c√∫ ph√°p! D√πng: /alert MaCK Gia\nV√≠ d·ª•: /alert VNM 80000")
        return
    
    symbol = context.args[0].upper()
    try:
        target_price = float(context.args[1])
    except:
        await update.message.reply_text("‚ùå Gi√° kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë.")
        return
    
    # Ki·ªÉm tra gi√° hi·ªán t·∫°i
    stock_info = get_stock_price(symbol)
    if not stock_info:
        await update.message.reply_text(f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ {symbol}. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # Ki·ªÉm tra s·ª± ki·ªán GDKHQ
    await update.message.reply_text(f"‚è≥ ƒêang ki·ªÉm tra s·ª± ki·ªán GDKHQ cho {symbol}...")
    gdkhq_info = check_gdkhq_event(symbol)
    
    # L∆∞u c·∫£nh b√°o
    if user_id not in user_alerts:
        user_alerts[user_id] = []
    
    alert_data = {
        'symbol': symbol,
        'target_price': target_price,
        'current_price': stock_info['price'],
        'created_at': datetime.now(),
        'gdkhq_info': gdkhq_info,
        'gdkhq_notified_1month': False
    }
    user_alerts[user_id].append(alert_data)
    
    # Th√¥ng b√°o k·∫øt qu·∫£
    gdkhq_text = ""
    if gdkhq_info['has_event']:
        gdkhq_text = f"\n\n‚ö†Ô∏è *C·∫£nh b√°o GDKHQ:*\nNg√†y: {gdkhq_info['date']}\nBot s·∫Ω nh·∫Øc l·∫°i khi c√≤n 1 th√°ng!"
    else:
        gdkhq_text = "\n\n‚úÖ *GDKHQ:* SAFE (Kh√¥ng c√≥ s·ª± ki·ªán trong 3 th√°ng t·ªõi)"
    
    response = f"""
‚úÖ *ƒê√£ t·∫°o c·∫£nh b√°o!*

üìä M√£: {symbol}
üí∞ Gi√° hi·ªán t·∫°i: {stock_info['price']:,.0f}
üéØ Gi√° m·ª•c ti√™u: {target_price:,.0f}
üìà Thay ƒë·ªïi: {stock_info['change_percent']:.2f}%{gdkhq_text}
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

# L·ªánh /list
async def list_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Xem danh s√°ch c·∫£nh b√°o"""
    user_id = update.effective_user.id
    
    if user_id not in user_alerts or len(user_alerts[user_id]) == 0:
        await update.message.reply_text("üì≠ B·∫°n ch∆∞a c√≥ c·∫£nh b√°o n√†o!")
        return
    
    response = "*üìã Danh s√°ch c·∫£nh b√°o c·ªßa b·∫°n:*\n\n"
    for idx, alert in enumerate(user_alerts[user_id], 1):
        stock_info = get_stock_price(alert['symbol'])
        current_price = stock_info['price'] if stock_info else alert['current_price']
        
        gdkhq_status = "‚úÖ SAFE" if not alert['gdkhq_info']['has_event'] else f"‚ö†Ô∏è GDKHQ: {alert['gdkhq_info']['date']}"
        
        response += f"""
{idx}. *{alert['symbol']}*
   Gi√° hi·ªán t·∫°i: {current_price:,.0f}
   M·ª•c ti√™u: {alert['target_price']:,.0f}
   {gdkhq_status}
   
"""
    
    response += "\nüí° D√πng /delete <s·ªë> ƒë·ªÉ x√≥a c·∫£nh b√°o"
    await update.message.reply_text(response, parse_mode='Markdown')

# L·ªánh /delete
async def delete_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X√≥a c·∫£nh b√°o"""
    user_id = update.effective_user.id
    
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå Sai c√∫ ph√°p! D√πng: /delete <s·ªë th·ª© t·ª±>")
        return
    
    try:
        index = int(context.args[0]) - 1
        if user_id in user_alerts and 0 <= index < len(user_alerts[user_id]):
            deleted = user_alerts[user_id].pop(index)
            await update.message.reply_text(f"‚úÖ ƒê√£ x√≥a c·∫£nh b√°o {deleted['symbol']}!")
        else:
            await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o n√†y!")
    except:
        await update.message.reply_text("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!")

# L·ªánh /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Xem gi√° c·ªï phi·∫øu"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå Sai c√∫ ph√°p! D√πng: /price MaCK")
        return
    
    symbol = context.args[0].upper()
    stock_info = get_stock_price(symbol)
    
    if not stock_info:
        await update.message.reply_text(f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ {symbol}")
        return
    
    response = f"""
üìä *{symbol}*

üí∞ Gi√°: {stock_info['price']:,.0f}
üìà Thay ƒë·ªïi: {stock_info['change']:,.0f} ({stock_info['change_percent']:.2f}%)
    """
    await update.message.reply_text(response, parse_mode='Markdown')

# H√†m ki·ªÉm tra c·∫£nh b√°o ƒë·ªãnh k·ª≥
async def check_alerts(context: ContextTypes.DEFAULT_TYPE):
    """Ki·ªÉm tra t·∫•t c·∫£ c·∫£nh b√°o m·ªói 5 ph√∫t"""
    for user_id, alerts in user_alerts.items():
        for alert in alerts[:]:
            stock_info = get_stock_price(alert['symbol'])
            if not stock_info:
                continue
            
            current_price = stock_info['price']
            
            # Ki·ªÉm tra ƒë·∫°t m·ª•c ti√™u
            if current_price >= alert['target_price']:
                message = f"""
üéØ *C·∫¢NH B√ÅO GI√Å ƒê·∫†T M·ª§C TI√äU!*

üìä M√£: {alert['symbol']}
üí∞ Gi√° hi·ªán t·∫°i: {current_price:,.0f}
üéØ Gi√° m·ª•c ti√™u: {alert['target_price']:,.0f}
‚úÖ ƒê√£ ƒë·∫°t m·ª•c ti√™u!
                """
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
                    alerts.remove(alert)
                except:
                    pass
            
            # Ki·ªÉm tra GDKHQ c√≤n 1 th√°ng
            if alert['gdkhq_info']['has_event'] and not alert['gdkhq_notified_1month']:
                try:
                    event_date = datetime.strptime(alert['gdkhq_info']['date'], '%Y-%m-%d')
                    days_left = (event_date - datetime.now()).days
                    
                    if days_left <= 30 and days_left > 0:
                        message = f"""
‚ö†Ô∏è *NH·∫ÆC NH·ªû GDKHQ*

üìä M√£: {alert['symbol']}
üìÖ Ng√†y GDKHQ: {alert['gdkhq_info']['date']}
‚è∞ C√≤n {days_left} ng√†y n·ªØa!
                        """
                        await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
                        alert['gdkhq_notified_1month'] = True
                except:
                    pass

# Main
def main():
    """Kh·ªüi ch·∫°y bot"""
    TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå L·ªói: Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN! Vui l√≤ng th√™m token v√†o bi·∫øn m√¥i tr∆∞·ªùng.")
        return
    
    # T·∫°o application
    application = Application.builder().token(TOKEN).build()
    
    # Th√™m handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("alert", alert))
    application.add_handler(CommandHandler("list", list_alerts))
    application.add_handler(CommandHandler("delete", delete_alert))
    application.add_handler(CommandHandler("price", price))
    
    # Th√™m job ki·ªÉm tra c·∫£nh b√°o m·ªói 5 ph√∫t
    job_queue = application.job_queue
    job_queue.run_repeating(check_alerts, interval=300, first=10)
    
    # Ch·∫°y bot
    print("‚úÖ Bot ƒëang ch·∫°y...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
